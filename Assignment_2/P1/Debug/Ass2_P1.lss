
Ass2_P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000668  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define DDRB *((uint8_t*)0x37)
#define PORTB *((uint8_t*)0x38)


int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	// sw is input
	 DDRB&=~(1<<0);
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8c 93       	st	X, r24
	 DDRB&=~(1<<1);
  82:	a7 e3       	ldi	r26, 0x37	; 55
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8c 93       	st	X, r24
	 DDRB&=~(1<<2);
  90:	a7 e3       	ldi	r26, 0x37	; 55
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e3       	ldi	r30, 0x37	; 55
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8c 93       	st	X, r24
	// sw is pulled up
	 PORTB|=(1<<0);
  9e:	a8 e3       	ldi	r26, 0x38	; 56
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c 93       	st	X, r24
	 PORTB|=(1<<1);
  ac:	a8 e3       	ldi	r26, 0x38	; 56
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e8 e3       	ldi	r30, 0x38	; 56
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8c 93       	st	X, r24
	 PORTB|=(1<<2);
  ba:	a8 e3       	ldi	r26, 0x38	; 56
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e8 e3       	ldi	r30, 0x38	; 56
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	8c 93       	st	X, r24

	 //led is output,low at start
	DDRA |=(1<<0);
  c8:	aa e3       	ldi	r26, 0x3A	; 58
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	ea e3       	ldi	r30, 0x3A	; 58
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8c 93       	st	X, r24
	DDRA |=(1<<1);
  d6:	aa e3       	ldi	r26, 0x3A	; 58
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ea e3       	ldi	r30, 0x3A	; 58
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	8c 93       	st	X, r24
	PORTA &=~(1<<0);
  e4:	ab e3       	ldi	r26, 0x3B	; 59
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	eb e3       	ldi	r30, 0x3B	; 59
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8e 7f       	andi	r24, 0xFE	; 254
  f0:	8c 93       	st	X, r24
	PORTA &=~(1<<1);
  f2:	ab e3       	ldi	r26, 0x3B	; 59
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	eb e3       	ldi	r30, 0x3B	; 59
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	8c 93       	st	X, r24
	while(1)
	{
		if(PINB&(1<<0)&&PINB&(1<<2))// sw is open
 100:	e6 e3       	ldi	r30, 0x36	; 54
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	81 70       	andi	r24, 0x01	; 1
 10c:	90 70       	andi	r25, 0x00	; 0
 10e:	98 2f       	mov	r25, r24
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	89 27       	eor	r24, r25
 114:	88 23       	and	r24, r24
 116:	89 f4       	brne	.+34     	; 0x13a <main+0xce>
 118:	e6 e3       	ldi	r30, 0x36	; 54
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	84 70       	andi	r24, 0x04	; 4
 124:	90 70       	andi	r25, 0x00	; 0
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	41 f0       	breq	.+16     	; 0x13a <main+0xce>
			PORTA&=~(1<<0);
 12a:	ab e3       	ldi	r26, 0x3B	; 59
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	eb e3       	ldi	r30, 0x3B	; 59
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	8c 93       	st	X, r24
 138:	07 c0       	rjmp	.+14     	; 0x148 <main+0xdc>
		else // sw is close
			PORTA|=(1<<0);
 13a:	ab e3       	ldi	r26, 0x3B	; 59
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	eb e3       	ldi	r30, 0x3B	; 59
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	8c 93       	st	X, r24

		if(PINB&(1<<1) &&PINB&(1<<2))// sw is open
 148:	e6 e3       	ldi	r30, 0x36	; 54
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	82 70       	andi	r24, 0x02	; 2
 154:	90 70       	andi	r25, 0x00	; 0
 156:	00 97       	sbiw	r24, 0x00	; 0
 158:	89 f0       	breq	.+34     	; 0x17c <main+0x110>
 15a:	e6 e3       	ldi	r30, 0x36	; 54
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	84 70       	andi	r24, 0x04	; 4
 166:	90 70       	andi	r25, 0x00	; 0
 168:	00 97       	sbiw	r24, 0x00	; 0
 16a:	41 f0       	breq	.+16     	; 0x17c <main+0x110>
			PORTA&=~(1<<1);
 16c:	ab e3       	ldi	r26, 0x3B	; 59
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	eb e3       	ldi	r30, 0x3B	; 59
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	8c 93       	st	X, r24
 17a:	c2 cf       	rjmp	.-124    	; 0x100 <main+0x94>
		else  // sw is close
			PORTA|=(1<<1);
 17c:	ab e3       	ldi	r26, 0x3B	; 59
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	eb e3       	ldi	r30, 0x3B	; 59
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	82 60       	ori	r24, 0x02	; 2
 188:	8c 93       	st	X, r24
 18a:	ba cf       	rjmp	.-140    	; 0x100 <main+0x94>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
